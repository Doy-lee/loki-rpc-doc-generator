struct - 2
COMMAND_RPC_GET_HEIGHT - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
height - 5
Current length of longest chain known to daemon.  - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good.  - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false).  - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCKS_FAST - 3
{ - 0
struct - 2
request - 3
{ - 0
std::list<crypto::hash> - 7
block_ids - 5
first 10 blocks id goes sequential, next goes in pow(2,n) offset, like 2, 4, 8, 16, 32, 64 and so on, and the last one is always genesis block - 6
uint64_t - 7
start_height - 5
bool - 7
prune - 5
bool - 7
no_miner_tx - 5
} - 1
struct - 2
tx_output_indices - 3
{ - 0
std::vector<uint64_t> - 7
indices - 5
} - 1
struct - 2
block_output_indices - 3
{ - 0
std::vector<tx_output_indices> - 7
indices - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<block_complete_entry> - 7
blocks - 5
uint64_t - 7
start_height - 5
uint64_t - 7
current_height - 5
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<block_output_indices> - 7
output_indices - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCKS_BY_HEIGHT - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<uint64_t> - 7
heights - 5
list of block heights - 6
} - 1
struct - 2
response - 3
{ - 0
std::vector<block_complete_entry> - 7
blocks - 5
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_ALT_BLOCKS_HASHES - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::vector<std::string> - 7
blks_hashes - 5
list of alternative blocks hashes to main chain - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_HASHES_FAST - 3
{ - 0
struct - 2
request - 3
{ - 0
std::list<crypto::hash> - 7
block_ids - 5
first 10 blocks id goes sequential, next goes in pow(2,n) offset, like 2, 4, 8, 16, 32, 64 and so on, and the last one is always genesis block - 6
uint64_t - 7
start_height - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<crypto::hash> - 7
m_block_ids - 5
see block_ids above. - 6
uint64_t - 7
start_height - 5
uint64_t - 7
current_height - 5
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_ADDRESS_TXS - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
address - 5
std::string - 7
view_key - 5
} - 1
struct - 2
spent_output - 3
{ - 0
uint64_t - 7
amount - 5
std::string - 7
key_image - 5
std::string - 7
tx_pub_key - 5
uint64_t - 7
out_index - 5
uint32_t - 7
mixin - 5
} - 1
struct - 2
transaction - 3
{ - 0
uint64_t - 7
id - 5
std::string - 7
hash - 5
uint64_t - 7
timestamp - 5
uint64_t - 7
total_received - 5
uint64_t - 7
total_sent - 5
uint64_t - 7
unlock_time - 5
uint64_t - 7
height - 5
std::list<spent_output> - 7
spent_outputs - 5
std::string - 7
payment_id - 5
bool - 7
coinbase - 5
bool - 7
mempool - 5
uint32_t - 7
mixin - 5
} - 1
struct - 2
response - 3
{ - 0
std::list<std::string> txs_as_json; - 6
uint64_t - 7
total_received - 5
uint64_t - 7
total_received_unlocked - 5
OpenMonero only - 6
uint64_t - 7
scanned_height - 5
std::vector<transaction> - 7
transactions - 5
uint64_t - 7
blockchain_height - 5
uint64_t - 7
scanned_block_height - 5
std::string - 7
status - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_ADDRESS_INFO - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
address - 5
std::string - 7
view_key - 5
} - 1
struct - 2
spent_output - 3
{ - 0
uint64_t - 7
amount - 5
std::string - 7
key_image - 5
std::string - 7
tx_pub_key - 5
uint64_t - 7
out_index - 5
uint32_t - 7
mixin - 5
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
locked_funds - 5
uint64_t - 7
total_received - 5
uint64_t - 7
total_sent - 5
uint64_t - 7
scanned_height - 5
uint64_t - 7
scanned_block_height - 5
uint64_t - 7
start_height - 5
uint64_t - 7
transaction_height - 5
uint64_t - 7
blockchain_height - 5
std::list<spent_output> - 7
spent_outputs - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_UNSPENT_OUTS - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
amount - 5
std::string - 7
address - 5
std::string - 7
view_key - 5
OpenMonero specific - 6
uint64_t - 7
mixin - 5
bool - 7
use_dust - 5
std::string - 7
dust_threshold - 5
} - 1
struct - 2
output - 3
{ - 0
uint64_t - 7
amount - 5
std::string - 7
public_key - 5
uint64_t - 7
index - 5
uint64_t - 7
global_index - 5
std::string - 7
rct - 5
std::string - 7
tx_hash - 5
std::string - 7
tx_pub_key - 5
std::string - 7
tx_prefix_hash - 5
std::vector<std::string> - 7
spend_key_images - 5
uint64_t - 7
timestamp - 5
uint64_t - 7
height - 5
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
amount - 5
std::list<output> - 7
outputs - 5
uint64_t - 7
per_kb_fee - 5
std::string - 7
status - 5
std::string - 7
reason - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_RANDOM_OUTS - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
amounts - 5
uint32_t - 7
count - 5
} - 1
struct - 2
output - 3
{ - 0
std::string - 7
public_key - 5
uint64_t - 7
global_index - 5
std::string - 7
rct - 5
64+64+64 characters long (<rct commit> + <encrypted mask> + <rct amount>) - 6
} - 1
struct - 2
amount_out - 3
{ - 0
uint64_t - 7
amount - 5
std::vector<output> - 7
outputs - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<amount_out> - 7
amount_outs - 5
std::string - 7
Error - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_SUBMIT_RAW_TX - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
address - 5
std::string - 7
view_key - 5
std::string - 7
tx - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::string - 7
error - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_LOGIN - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
address - 5
std::string - 7
view_key - 5
bool - 7
create_account - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::string - 7
reason - 5
bool - 7
new_address - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_IMPORT_WALLET_REQUEST - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
address - 5
std::string - 7
view_key - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
payment_id - 5
uint64_t - 7
import_fee - 5
bool - 7
new_request - 5
bool - 7
request_fulfilled - 5
std::string - 7
payment_address - 5
std::string - 7
status - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_TRANSACTIONS - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
txs_hashes - 5
List of transaction hashes to look up. - 6
bool - 7
decode_as_json - 5
Optional (false by default). If set true, the returned transaction information will be decoded rather than binary. - 6
bool - 7
prune - 5
Optional (false by default). - 6
bool - 7
split - 5
} - 1
struct - 2
entry - 3
{ - 0
std::string - 7
tx_hash - 5
transaction hash - 6
std::string - 7
as_hex - 5
Full transaction information as a hex string. - 6
std::string - 7
pruned_as_hex - 5
std::string - 7
prunable_as_hex - 5
std::string - 7
prunable_hash - 5
std::string - 7
as_json - 5
Full transaction information as a JSON string. - 6
bool - 7
in_pool - 5
States if the transaction is in pool (true) or included in a block (false) - 6
bool - 7
double_spend_seen - 5
States if the transaction is a double-spend (true) or not (false) - 6
uint64_t - 7
block_height - 5
block height including the transaction - 6
uint64_t - 7
block_timestamp - 5
Unix time at chich the block has been added to the blockchain - 6
std::vector<uint64_t> - 7
output_indices - 5
transaction indexes - 6
} - 1
struct - 2
response - 3
{ - 0
older compatibility stuff - 6
std::vector<std::string> - 7
txs_as_hex - 5
transactions blobs as hex (old compat) - 6
std::vector<std::string> - 7
txs_as_json - 5
transactions decoded as json (old compat) - 6
in both old and new - 6
std::vector<std::string> - 7
missed_tx - 5
(Optional - returned if not empty) Transaction hashes that could not be found. - 6
new style - 6
std::vector<entry> - 7
txs - 5
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_IS_KEY_IMAGE_SPENT - 3
{ - 0
enumer - 11
STATUS - 4
{ - 0
UNSPENT - 10
0, - 9
SPENT_IN_BLOCKCHAIN - 10
1, - 9
SPENT_IN_POOL - 10
2, - 9
} - 1
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
key_images - 5
List of key image hex strings to check. - 6
} - 1
struct - 2
response - 3
{ - 0
std::vector<int> - 7
spent_status - 5
List of statuses for each image checked. Statuses are follows: 0 = unspent, 1 = spent in blockchain, 2 = spent in transaction pool - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES - 3
{ - 0
struct - 2
request - 3
{ - 0
crypto::hash - 7
txid - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<uint64_t> - 7
o_indexes - 5
List of output indexes - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
get_outputs_out - 3
{ - 0
uint64_t - 7
amount - 5
uint64_t - 7
index - 5
} - 1
struct - 2
COMMAND_RPC_GET_OUTPUTS_BIN - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<get_outputs_out> - 7
outputs - 5
bool - 7
get_txid - 5
} - 1
struct - 2
outkey - 3
{ - 0
crypto::public_key - 7
key - 5
rct::key - 7
mask - 5
bool - 7
unlocked - 5
uint64_t - 7
height - 5
crypto::hash - 7
txid - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<outkey> - 7
outs - 5
std::string - 7
status - 5
bool - 7
untrusted - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_OUTPUTS - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<get_outputs_out> - 7
outputs - 5
} - 1
struct - 2
outkey - 3
{ - 0
std::string - 7
key - 5
std::string - 7
mask - 5
bool - 7
unlocked - 5
States if output is locked (false) or not (true) - 6
uint64_t - 7
height - 5
std::string - 7
txid - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<outkey> - 7
outs - 5
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_SEND_RAW_TX - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
tx_as_hex - 5
Full transaction information as hexidecimal string. - 6
bool - 7
do_not_relay - 5
Stop relaying transaction to other nodes (default is false). - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
std::string - 7
reason - 5
Additional information. Currently empty or "Not relayed" if transaction was accepted but not relayed. - 6
bool - 7
not_relayed - 5
Transaction was not relayed (true) or relayed (false). - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
tx_verification_context - 7
tvc - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_START_MINING - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
miner_address - 5
Account address to mine to. - 6
uint64_t - 7
threads_count - 5
Number of mining thread to run. - 6
bool - 7
do_background_mining - 5
States if the mining should run in background (true) or foreground (false). - 6
bool - 7
ignore_battery - 5
States if battery state (on laptop) should be ignored (true) or not (false). - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_INFO - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint64_t - 7
height - 5
Current length of longest chain known to daemon. - 6
uint64_t - 7
target_height - 5
The height of the next block in the chain. - 6
uint64_t - 7
difficulty - 5
Network difficulty (analogous to the strength of the network) - 6
uint64_t - 7
target - 5
Current target for next proof of work. - 6
uint64_t - 7
tx_count - 5
Total number of non-coinbase transaction in the chain. - 6
uint64_t - 7
tx_pool_size - 5
Number of transactions that have been broadcast but not included in a block. - 6
uint64_t - 7
alt_blocks_count - 5
Number of alternative blocks to main chain. - 6
uint64_t - 7
outgoing_connections_count - 5
Number of peers that you are connected to and getting information from. - 6
uint64_t - 7
incoming_connections_count - 5
Number of peers connected to and pulling from your node. - 6
uint64_t - 7
rpc_connections_count - 5
Number of RPC client connected to the daemon (Including this RPC request). - 6
uint64_t - 7
white_peerlist_size - 5
White Peerlist Size - 6
uint64_t - 7
grey_peerlist_size - 5
Grey Peerlist Size - 6
bool - 7
mainnet - 5
States if the node is on the mainnet (true) or not (false). - 6
bool - 7
testnet - 5
States if the node is on the testnet (true) or not (false). - 6
bool - 7
stagenet - 5
States if the node is on the stagenet (true) or not (false). - 6
std::string - 7
nettype - 5
Network type - 6
std::string - 7
top_block_hash - 5
Hash of the highest block in the chain. - 6
uint64_t - 7
cumulative_difficulty - 5
Cumulative difficulty of all blocks in the blockchain. - 6
uint64_t - 7
block_size_limit - 5
Maximum allowed block size - 6
uint64_t - 7
block_weight_limit - 5
Maximum allowed weight - 6
uint64_t - 7
block_size_median - 5
Median block size of latest 100 blocks - 6
uint64_t - 7
block_weight_median - 5
Median weight of latest 100 blocks - 6
uint64_t - 7
start_time - 5
Start time of the daemon, as UNIX time. - 6
uint64_t - 7
free_space - 5
Available disk space on the node. - 6
bool - 7
offline - 5
States if the node is offline (true) or online (false). - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
std::string - 7
bootstrap_daemon_address - 5
bootstrap node to give immediate usability to wallets while syncing by proxying RPC to it. (Note: the replies may be untrustworthy). - 6
uint64_t - 7
height_without_bootstrap - 5
Current length of the local chain of the daemon. - 6
bool - 7
was_bootstrap_ever_used - 5
States if a bootstrap node has ever been used since the daemon started. - 6
uint64_t - 7
database_size - 5
Size of database - 6
bool - 7
update_available - 5
std::string - 7
version - 5
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_GET_ALL_SERVICE_NODES_KEYS - 3
{ - 0
struct - 2
request - 3
{ - 0
bool - 7
fully_funded_nodes_only - 5
Return keys for service nodes if they are funded and working on the network - 6
} - 1
struct - 2
response - 3
{ - 0
std::vector<std::string> - 7
keys - 5
NOTE: Returns as base32z of the hex key, for Lokinet internal usage - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_STOP_MINING - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_MINING_STATUS - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
active - 5
States if mining is enabled (true) or disabled (false). - 6
uint64_t - 7
speed - 5
Mining power in hashes per seconds. - 6
uint32_t - 7
threads_count - 5
Number of running mining threads. - 6
std::string - 7
address - 5
Account address daemon is mining to. Empty if not mining. - 6
bool - 7
is_background_mining_enabled - 5
States if the mining is running in background (true) or foreground (false). - 6
} - 1
} - 1
----------------------------------------------- - 6
struct - 2
COMMAND_RPC_SAVE_BC - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GETBLOCKCOUNT - 3
{ - 0
typedef - 8
std::list<std::string> - 7
request - 5
struct - 2
response - 3
{ - 0
uint64_t - 7
count - 5
Number of blocks - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GETBLOCKHASH - 3
{ - 0
typedef - 8
std::vector<uint64_t> - 7
request - 5
typedef - 8
std::string - 7
response - 5
} - 1
struct - 2
COMMAND_RPC_GETBLOCKTEMPLATE - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
reserve_size - 5
Reserve size. - 6
std::string - 7
wallet_address - 5
Address of wallet to receive coinbase transactions if block is successfully mined. - 6
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
difficulty - 5
Difficulty of next block. - 6
uint64_t - 7
height - 5
Height on which to mine. - 6
uint64_t - 7
reserved_offset - 5
Reserved offset. - 6
uint64_t - 7
expected_reward - 5
Coinbase reward expected to be received if block is successfully mined. - 6
std::string - 7
prev_hash - 5
Hash of the most recent block on which to mine the next block. - 6
blobdata - 7
blocktemplate_blob - 5
Blob on which to try to mine a new block. - 6
blobdata - 7
blockhashing_blob - 5
Blob on which to try to find a valid nonce. - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SUBMITBLOCK - 3
{ - 0
typedef - 8
std::vector<std::string> - 7
request - 5
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GENERATEBLOCKS - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
amount_of_blocks - 5
std::string - 7
wallet_address - 5
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
height - 5
std::string - 7
status - 5
} - 1
} - 1
struct - 2
block_header_response - 3
{ - 0
uint8_t - 7
major_version - 5
The major version of the loki protocol at this block height. - 6
uint8_t - 7
minor_version - 5
The minor version of the loki protocol at this block height. - 6
uint64_t - 7
timestamp - 5
The unix time at which the block was recorded into the blockchain. - 6
std::string - 7
prev_hash - 5
The hash of the block immediately preceding this block in the chain. - 6
uint32_t - 7
nonce - 5
a cryptographic random one-time number used in mining a Loki block. - 6
bool - 7
orphan_status - 5
Usually false. If true, this block is not part of the longest chain. - 6
uint64_t - 7
height - 5
The number of blocks preceding this block on the blockchain. - 6
uint64_t - 7
depth - 5
The number of blocks succeeding this block on the blockchain. A larger number means an older block. - 6
std::string - 7
hash - 5
The hash of this block. - 6
difficulty_type - 7
difficulty - 5
The strength of the Loki network based on mining power. - 6
difficulty_type - 7
cumulative_difficulty - 5
uint64_t - 7
reward - 5
The amount of new generated in this block and rewarded to the miner. Note: 1 LOKI = 1e12 atomic units. - 6
uint64_t - 7
miner_reward - 5
uint64_t - 7
block_size - 5
The block size in bytes. - 6
uint64_t - 7
block_weight - 5
The block weight. - 6
uint64_t - 7
num_txes - 5
Number of transactions in the block, not counting the coinbase tx. - 6
std::string - 7
pow_hash - 5
} - 1
struct - 2
COMMAND_RPC_GET_LAST_BLOCK_HEADER - 3
{ - 0
struct - 2
request - 3
{ - 0
bool - 7
fill_pow_hash - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
block_header_response - 7
block_header - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCK_HEADER_BY_HASH - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
hash - 5
The block's sha256 hash. - 6
bool - 7
fill_pow_hash - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
block_header_response - 7
block_header - 5
A structure containing block header information. See get_last_block_header. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCK_HEADER_BY_HEIGHT - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
height - 5
The block's height. - 6
bool - 7
fill_pow_hash - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
block_header_response - 7
block_header - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCK - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
hash - 5
The block's hash. - 6
uint64_t - 7
height - 5
The block's height. - 6
bool - 7
fill_pow_hash - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
block_header_response - 7
block_header - 5
std::string - 7
miner_tx_hash - 5
std::vector<std::string> - 7
tx_hashes - 5
List of hashes of non-coinbase transactions in the block. If there are no other transactions, this will be an empty list. - 6
std::string - 7
blob - 5
Hexadecimal blob of block information. - 6
std::string - 7
json - 5
JSON formatted block details - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
peer - 3
{ - 0
uint64_t - 7
id - 5
Peer id - 6
std::string - 7
host - 5
IP address in integer format - 6
uint32_t - 7
ip - 5
IP address in integer format - 6
uint16_t - 7
port - 5
TCP port the peer is using to connect to loki network. - 6
uint64_t - 7
last_seen - 5
unix time at which the peer has been seen for the last time - 6
uint32_t - 7
pruning_seed - 5
peer() = default; - 6
//peer(uint64_t id, const std::string &host, uint64_t last_seen, uint32_t pruning_seed) - 6
: id(id), host(host), ip(0), port(0), last_seen(last_seen), pruning_seed(pruning_seed) - 6
{} - 6
peer(uint64_t id, uint32_t ip, uint16_t port, uint64_t last_seen, uint32_t pruning_seed) - 6
: id(id), host(std::to_string(ip)), ip(ip), port(port), last_seen(last_seen), pruning_seed(pruning_seed) - 6
{} - 6
} - 1
struct - 2
COMMAND_RPC_GET_PEER_LIST - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
std::vector<peer> - 7
white_list - 5
online - 6
std::vector<peer> - 7
gray_list - 5
offline - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SET_LOG_HASH_RATE - 3
{ - 0
struct - 2
request - 3
{ - 0
bool - 7
visible - 5
States if hash rate logs should be visible (true) or hidden (false) - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SET_LOG_LEVEL - 3
{ - 0
struct - 2
request - 3
{ - 0
int8_t - 7
level - 5
daemon log level to set from 0 (less verbose) to 4 (most verbose) - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SET_LOG_CATEGORIES - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
categories - 5
Optional, daemon log categories to enable - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. Any other value means that something went wrong. - 6
std::string - 7
categories - 5
daemon log enabled categories - 6
} - 1
} - 1
struct - 2
tx_info - 3
{ - 0
std::string - 7
id_hash - 5
The transaction ID hash. - 6
std::string - 7
tx_json - 5
JSON structure of all information in the transaction (TODO: expose directly) - 6
uint64_t - 7
blob_size - 5
The size of the full transaction blob. - 6
uint64_t - 7
weight - 5
uint64_t - 7
fee - 5
The amount of the mining fee included in the transaction, in atomic units. - 6
std::string - 7
max_used_block_id_hash - 5
Tells the hash of the most recent block with an output used in this transaction. - 6
uint64_t - 7
max_used_block_height - 5
Tells the height of the most recent block with an output used in this transaction. - 6
bool - 7
kept_by_block - 5
States if the tx was included in a block at least once (true) or not (false). - 6
uint64_t - 7
last_failed_height - 5
If the transaction validation has previously failed, this tells at what height that occured. - 6
std::string - 7
last_failed_id_hash - 5
Like the previous, this tells the previous transaction ID hash. - 6
uint64_t - 7
receive_time - 5
The Unix time that the transaction was first seen on the network by the node. - 6
bool - 7
relayed - 5
States if this transaction has been relayed - 6
uint64_t - 7
last_relayed_time - 5
Last unix time at which the transaction has been relayed. - 6
bool - 7
do_not_relay - 5
States if this transaction should not be relayed - 6
bool - 7
double_spend_seen - 5
States if this transaction has been seen as double spend. - 6
std::string - 7
tx_blob - 5
Hexadecimal blob represnting the transaction. - 6
} - 1
struct - 2
spent_key_image_info - 3
{ - 0
std::string - 7
id_hash - 5
Key image. - 6
std::vector<std::string> - 7
txs_hashes - 5
tx hashes of the txes (usually one) spending that key image. - 6
} - 1
struct - 2
COMMAND_RPC_GET_TRANSACTION_POOL - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<tx_info> - 7
transactions - 5
List of transactions in the mempool are not in a block on the main chain at the moment - 6
std::vector<spent_key_image_info> - 7
spent_key_images - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_TRANSACTION_POOL_HASHES_BIN - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<crypto::hash> - 7
tx_hashes - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_TRANSACTION_POOL_HASHES - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::vector<std::string> - 7
tx_hashes - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
tx_backlog_entry - 3
{ - 0
uint64_t - 7
weight - 5
binary - 6
uint64_t - 7
fee - 5
binary - 6
uint64_t - 7
time_in_pool - 5
binary - 6
} - 1
struct - 2
COMMAND_RPC_GET_TRANSACTION_POOL_BACKLOG - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<tx_backlog_entry> - 7
backlog - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
txpool_histo - 3
{ - 0
uint32_t - 7
txs - 5
number of transactions - 6
uint64_t - 7
bytes - 5
size in bytes. - 6
} - 1
struct - 2
txpool_stats - 3
{ - 0
uint64_t - 7
bytes_total - 5
total size of all transactions in pool - 6
uint32_t - 7
bytes_min - 5
Min transaction size in pool - 6
uint32_t - 7
bytes_max - 5
Max transaction size in pool - 6
uint32_t - 7
bytes_med - 5
Median transaction size in pool - 6
uint64_t - 7
fee_total - 5
uint64_t - 7
oldest - 5
unix time of the oldest transaction in the pool - 6
uint32_t - 7
txs_total - 5
total number of transactions. - 6
uint32_t - 7
num_failing - 5
number of failing transactions - 6
uint32_t - 7
num_10m - 5
number of transactions in pool for more than 10 minutes - 6
uint32_t - 7
num_not_relayed - 5
number of non-relayed transactions - 6
uint64_t - 7
histo_98pc - 5
the time 98% of txes are "younger" than - 6
std::vector<txpool_histo> - 7
histo - 5
uint32_t - 7
num_double_spends - 5
number of double spend transactions - 6
txpool_stats(): bytes_total(0), bytes_min(0), bytes_max(0), bytes_med(0), fee_total(0), oldest(0), txs_total(0), num_failing(0), num_10m(0), num_not_relayed(0), histo_98pc(0), num_double_spends(0) {} - 6
} - 1
struct - 2
COMMAND_RPC_GET_TRANSACTION_POOL_STATS - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
txpool_stats - 7
pool_stats - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_CONNECTIONS - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::list<connection_info> - 7
connections - 5
All connections and their information. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BLOCK_HEADERS_RANGE - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
start_height - 5
The starting block's height. - 6
uint64_t - 7
end_height - 5
The ending block's height. - 6
bool - 7
fill_pow_hash - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<block_header_response> - 7
headers - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_STOP_DAEMON - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_FAST_EXIT - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_LIMIT - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint64_t - 7
limit_up - 5
Upload limit in kBytes per second - 6
uint64_t - 7
limit_down - 5
Download limit in kBytes per second - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SET_LIMIT - 3
{ - 0
struct - 2
request - 3
{ - 0
int64_t - 7
limit_down - 5
Download limit in kBytes per second (-1 reset to default, 0 don't change the current limit) - 6
int64_t - 7
limit_up - 5
Upload limit in kBytes per second (-1 reset to default, 0 don't change the current limit) - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
int64_t - 7
limit_up - 5
unsigned int; Upload limit in kBytes per second - 6
int64_t - 7
limit_down - 5
unsigned int; Download limit in kBytes per second - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_OUT_PEERS - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
out_peers - 5
Max number of outgoing peers - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_IN_PEERS - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
in_peers - 5
Max number of incoming peers - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_START_SAVE_GRAPH - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_STOP_SAVE_GRAPH - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_HARD_FORK_INFO - 3
{ - 0
struct - 2
request - 3
{ - 0
uint8_t - 7
version - 5
} - 1
struct - 2
response - 3
{ - 0
uint8_t - 7
version - 5
The major block version for the fork. - 6
bool - 7
enabled - 5
Tells if hard fork is enforced. - 6
uint32_t - 7
window - 5
Number of blocks over which current votes are cast. Default is 10080 blocks. - 6
uint32_t - 7
votes - 5
Number of votes towards hard fork. - 6
uint32_t - 7
threshold - 5
Minimum percent of votes to trigger hard fork. Default is 80. - 6
uint8_t - 7
voting - 5
Hard fork voting status. - 6
uint32_t - 7
state - 5
Current hard fork state: 0 (There is likely a hard fork), 1 (An update is needed to fork properly), or 2 (Everything looks good). - 6
uint64_t - 7
earliest_height - 5
Block height at which hard fork would be enabled if voted in. - 6
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GETBANS - 3
{ - 0
struct - 2
ban - 3
{ - 0
std::string - 7
host - 5
Banned host (IP in A.B.C.D form). - 6
uint32_t - 7
ip - 5
Banned IP address, in Int format. - 6
uint32_t - 7
seconds - 5
Local Unix time that IP is banned until. - 6
} - 1
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<ban> - 7
bans - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_SETBANS - 3
{ - 0
struct - 2
ban - 3
{ - 0
std::string - 7
host - 5
Host to ban (IP in A.B.C.D form - will support I2P address in the future). - 6
uint32_t - 7
ip - 5
unsigned int; IP address to ban, in Int format. - 6
bool - 7
ban - 5
Set true to ban. - 6
uint32_t - 7
seconds - 5
Number of seconds to ban node. - 6
} - 1
struct - 2
request - 3
{ - 0
std::vector<ban> - 7
bans - 5
Nodes to ban - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_FLUSH_TRANSACTION_POOL - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
txids - 5
Optional, list of transactions IDs to flush from pool (all tx ids flushed if empty). - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_OUTPUT_HISTOGRAM - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<uint64_t> - 7
amounts - 5
uint64_t - 7
min_count - 5
uint64_t - 7
max_count - 5
bool - 7
unlocked - 5
uint64_t - 7
recent_cutoff - 5
} - 1
struct - 2
entry - 3
{ - 0
uint64_t - 7
amount - 5
Output amount in atomic units - 6
uint64_t - 7
total_instances - 5
uint64_t - 7
unlocked_instances - 5
uint64_t - 7
recent_instances - 5
entry(uint64_t amount, uint64_t total_instances, uint64_t unlocked_instances, uint64_t recent_instances): - 6
amount(amount), total_instances(total_instances), unlocked_instances(unlocked_instances), recent_instances(recent_instances) {} - 6
entry() {} - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<entry> - 7
histogram - 5
list of histogram entries - 6
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_VERSION - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint32_t - 7
version - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_COINBASE_TX_SUM - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
height - 5
Block height from which getting the amounts - 6
uint64_t - 7
count - 5
number of blocks to include in the sum - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint64_t - 7
emission_amount - 5
amount of coinbase reward in atomic units - 6
uint64_t - 7
fee_amount - 5
amount of fees in atomic units - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_BASE_FEE_ESTIMATE - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
grace_blocks - 5
Optional - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint64_t - 7
fee - 5
Amount of fees estimated per kB in atomic units - 6
uint64_t - 7
quantization_mask - 5
bool - 7
untrusted - 5
States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced (false). - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_ALTERNATE_CHAINS - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
chain_info - 3
{ - 0
std::string - 7
block_hash - 5
the block hash of the first diverging block of this alternative chain. - 6
uint64_t - 7
height - 5
the block height of the first diverging block of this alternative chain. - 6
uint64_t - 7
length - 5
the length in blocks of this alternative chain, after divergence. - 6
uint64_t - 7
difficulty - 5
the cumulative difficulty of all blocks in the alternative chain. - 6
std::vector<std::string> - 7
block_hashes - 5
std::string - 7
main_chain_parent_block - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::list<chain_info> - 7
chains - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_UPDATE - 3
{ - 0
struct - 2
request - 3
{ - 0
std::string - 7
command - 5
command to use, either check or download - 6
std::string - 7
path - 5
Optional, path where to download the update. - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
bool - 7
update - 5
States if an update is available to download (true) or not (false) - 6
std::string - 7
version - 5
Version available for download. - 6
std::string - 7
user_uri - 5
std::string - 7
auto_uri - 5
std::string - 7
hash - 5
std::string - 7
path - 5
path to download the update - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_RELAY_TX - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
txids - 5
list of transaction IDs to relay - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
} - 1
} - 1
struct - 2
COMMAND_RPC_SYNC_INFO - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
peer - 3
{ - 0
connection_info - 7
info - 5
} - 1
struct - 2
span - 3
{ - 0
uint64_t - 7
start_block_height - 5
block height of the first block in that span - 6
uint64_t - 7
nblocks - 5
number of blocks in that span - 6
std::string - 7
connection_id - 5
Id of connection - 6
uint32_t - 7
rate - 5
connection rate - 6
uint32_t - 7
speed - 5
connection speed - 6
uint64_t - 7
size - 5
total number of bytes in that span's blocks (including txes) - 6
std::string - 7
remote_address - 5
peer address the node is downloading (or has downloaded) than span from - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
uint64_t - 7
height - 5
uint64_t - 7
target_height - 5
target height the node is syncing from (optional, absent if node is fully synced) - 6
uint32_t - 7
next_needed_pruning_seed - 5
std::list<peer> - 7
peers - 5
std::list<span> - 7
spans - 5
std::string - 7
overview - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_OUTPUT_DISTRIBUTION - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<uint64_t> - 7
amounts - 5
amounts to look for - 6
uint64_t - 7
from_height - 5
(optional, default is 0) starting height to check from - 6
uint64_t - 7
to_height - 5
(optional, default is 0) ending height to check up to - 6
bool - 7
cumulative - 5
(optional, default is false) States if the result should be cumulative (true) or not (false) - 6
bool - 7
binary - 5
bool - 7
compress - 5
} - 1
struct - 2
distribution - 3
{ - 0
rpc::output_distribution_data - 7
data - 5
uint64_t - 7
amount - 5
std::string - 7
compressed_data - 5
bool - 7
binary - 5
bool - 7
compress - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
General RPC error code. "OK" means everything looks good. - 6
std::vector<distribution> - 7
distributions - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_POP_BLOCKS - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
nblocks - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
uint64_t - 7
height - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_PRUNE_BLOCKCHAIN - 3
{ - 0
struct - 2
request - 3
{ - 0
bool - 7
check - 5
} - 1
struct - 2
response - 3
{ - 0
uint32_t - 7
pruning_seed - 5
std::string - 7
status - 5
} - 1
} - 1
Loki - 6
struct - 2
COMMAND_RPC_GET_QUORUM_STATE - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
height - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::vector<std::string> - 7
quorum_nodes - 5
std::vector<std::string> - 7
nodes_to_test - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_QUORUM_STATE_BATCHED - 3
{ - 0
struct - 2
request - 3
{ - 0
both inclusive - 6
uint64_t - 7
height_begin - 5
uint64_t - 7
height_end - 5
} - 1
struct - 2
response_entry - 3
{ - 0
uint64_t - 7
height - 5
std::vector<std::string> - 7
quorum_nodes - 5
std::vector<std::string> - 7
nodes_to_test - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::vector<response_entry> - 7
quorum_entries - 5
bool - 7
untrusted - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_SERVICE_NODE_REGISTRATION_CMD_RAW - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
args - 5
bool - 7
make_friendly - 5
Provide information about how to use the command in the result - 6
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::string - 7
registration_cmd - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_SERVICE_NODE_REGISTRATION_CMD - 3
{ - 0
struct - 2
contribution_t - 3
{ - 0
std::string - 7
address - 5
uint64_t - 7
amount - 5
} - 1
struct - 2
request - 3
{ - 0
std::string - 7
operator_cut - 5
std::vector<contribution_t> - 7
contributions - 5
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
status - 5
std::string - 7
registration_cmd - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_SERVICE_NODE_KEY - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::string - 7
service_node_pubkey - 5
std::string - 7
status - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_SERVICE_NODES - 3
{ - 0
struct - 2
request - 3
{ - 0
std::vector<std::string> - 7
service_node_pubkeys - 5
pass empty vector to get all the service nodes - 6
bool - 7
include_json - 5
} - 1
struct - 2
response - 3
{ - 0
struct - 2
contribution - 3
{ - 0
std::string - 7
key_image - 5
std::string - 7
key_image_pub_key - 5
uint64_t - 7
amount - 5
} - 1
struct - 2
contributor - 3
{ - 0
uint64_t - 7
amount - 5
uint64_t - 7
reserved - 5
std::string - 7
address - 5
std::vector<contribution> - 7
locked_contributions - 5
} - 1
struct - 2
entry - 3
{ - 0
std::string - 7
service_node_pubkey - 5
uint64_t - 7
registration_height - 5
uint64_t - 7
requested_unlock_height - 5
uint64_t - 7
last_reward_block_height - 5
uint32_t - 7
last_reward_transaction_index - 5
uint64_t - 7
last_uptime_proof - 5
std::vector<contributor> - 7
contributors - 5
uint64_t - 7
total_contributed - 5
uint64_t - 7
total_reserved - 5
uint64_t - 7
staking_requirement - 5
uint64_t - 7
portions_for_operator - 5
std::string - 7
operator_address - 5
} - 1
std::vector<entry> - 7
service_node_states - 5
std::string - 7
status - 5
std::string - 7
as_json - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_STAKING_REQUIREMENT - 3
{ - 0
struct - 2
request - 3
{ - 0
uint64_t - 7
height - 5
} - 1
struct - 2
response - 3
{ - 0
uint64_t - 7
staking_requirement - 5
std::string - 7
status - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_SERVICE_NODE_BLACKLISTED_KEY_IMAGES - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
entry - 3
{ - 0
std::string - 7
key_image - 5
uint64_t - 7
unlock_height - 5
} - 1
struct - 2
response - 3
{ - 0
std::vector<entry> - 7
blacklist - 5
std::string - 7
status - 5
} - 1
} - 1
struct - 2
COMMAND_RPC_GET_OUTPUT_BLACKLIST - 3
{ - 0
struct - 2
request - 3
{ - 0
} - 1
struct - 2
response - 3
{ - 0
std::vector<uint64_t> - 7
blacklist - 5
std::string - 7
status - 5
bool - 7
untrusted - 5
} - 1
} - 1
#define - 7
